PDefs.   Program ::= [Stm] ;
terminator Stm "" ;

SInit. 			   Stm ::= "let" IdMaybeTyped "=" Exp ;
SSplit.			   Stm ::= "let" "(" IdMaybeTyped "," IdMaybeTyped ")" "=" Exp ;
SAssert. 		   Stm ::= Assertion ;

IdNotTyped. IdMaybeTyped ::= Id ;
IdTyped.    IdMaybeTyped ::= Id ":" Type ;

EInt.    Exp ::= Integer ;
EUnit.   Exp ::= "()" ;
EId.     Exp ::= Id ;
EPair.   Exp ::= "(" Exp "," Exp ")" ;

internal ETyped. Exp ::= "(" Exp ":" Type ")" ;

ATypeEqual. Assertion ::= "assertTypeEqual" "(" Id "," Type ")" ;

TType. 				 Type ::= CoreType "!" Double ;
TTypeExponential.  	 Type ::= CoreType "!" "inf" ;
TTypeConvenienceInt. Type ::= CoreType "!" Integer ;

CTBase.    CoreType ::= BaseType ;
CTMulPair. CoreType ::= "(" Type "," Type ")" ;

rules BaseType ::= "Int" | "Unit" ;

token Id (letter (letter | digit | '_')*) ;

comment "//" ;
comment "/*" "*/" ;
