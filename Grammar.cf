PDefs.   Program ::= [Stm] ;
terminator Stm "" ;

SInit. 			   Stm ::= "let" Id "=" Exp ;
SInitExplicitType. Stm ::= "let" Id ":" Type "=" Exp ;
SAssert. 		   Stm ::= Assertion ;

EInt.    Exp15  ::= Integer ;
EId.     Exp15  ::= Id ;
EPair.   Exp15  ::= "(" Exp "," Exp ")" ;

internal ETyped. Exp15 ::= "(" Exp ":" Type ")" ;

coercions Exp 15 ;

ATypeEqual. Assertion ::= "assertTypeEqual" "(" Id "," Type ")" ;

TType. 				 Type ::= CoreType "!" Double ;
TTypeExponential.  	 Type ::= CoreType "!" "inf" ;
TTypeConvenienceInt. Type ::= CoreType "!" Integer ;

CTBase.    CoreType ::= BaseType ;
CTMulPair. CoreType ::= "(" Type "," Type ")" ;

rules BaseType ::= "Int" ;

token Id (letter (letter | digit | '_')*) ;

comment "//" ;
comment "/*" "*/" ;
