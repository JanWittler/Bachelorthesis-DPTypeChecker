PDefs.   Program ::= [Def] ;
terminator Def "" ;

DFun.        Def ::= "func" Id "(" [Arg] ")" "->" Type "{" [Stm] "}" ;
DFunExposed. Def ::= "exposed" "func" Id "(" [Arg] ")" "->" Type "{" [Stm] "}" ;
DTypedef.	 Def ::= "typedef" Ident "=" "union" Type "|" Type ;

separator  Arg "," ;
terminator Stm "" ;

ADecl.     Arg ::= Id ":" Type ;

SInit.     Stm ::= "let" IdMaybeTyped "=" Exp ;
SSplit.    Stm ::= "let" "(" IdMaybeTyped "," IdMaybeTyped ")" "=" Exp ;
SIfElse.   Stm ::= "if" "(" IfCond ")" "{" [Stm] "}" Else ;
SReturn.   Stm ::= "return" Exp ;
SAssert.   Stm ::= Assertion ;

IdNotTyped. IdMaybeTyped ::= Id ;
IdTyped.    IdMaybeTyped ::= Id ":" Type ;

IfCondCase. IfCond ::= "case" "let" IdMaybeTyped "=" Case Exp ;
IfCondBool. IfCond ::= Exp ; 
IfCondUnfold. IfCond ::= "let" "(" IdMaybeTyped "," IdMaybeTyped ")" "=" "unfold" Exp ;

ElseNone. Else ::= ;
ElseStms. Else ::= "else" "{" [Stm] "}" ;

rules Case ::= "inl" | "inr" ;

EInt.    Exp15 ::= Integer ;
EFloat.  Exp15 ::= Double ;
EUnit.   Exp15 ::= "(" ")" ;
ETrue.   Exp15 ::= "true" ;
EFalse.  Exp15 ::= "false" ;
EOption. Exp15 ::= "Just" "(" Exp ")" ;
ENothing.Exp15 ::= "Nothing" ;
EId.     Exp15 ::= Id ;
EPair.   Exp15 ::= "(" Exp "," Exp ")" ;
ESum.    Exp15 ::= Ident "." Case "(" Exp ")" ;
EList.   Exp15 ::= "[" [Exp] "]" ;

EApp.    Exp15 ::= Id "(" [Exp] ")" ;

ENegative. Exp14 ::= "-" Exp13 ;
ENot.      Exp13 ::= "!"  Exp14 ;

ETimes.  Exp12 ::= Exp12 "*"  Exp13 ;
EPlus.   Exp11 ::= Exp11 "+"  Exp12 ;
EMinus.  Exp11 ::= Exp11 "-"  Exp12 ;

ELt.     Exp9  ::= Exp9  "<"  Exp10 ;
EGt.     Exp9  ::= Exp9  ">"  Exp10 ;
ELtEq.   Exp9  ::= Exp9  "<=" Exp10 ;
EGtEq.   Exp9  ::= Exp9  ">=" Exp10 ;

EEq.     Exp8  ::= Exp8  "==" Exp9 ;
ENeq.    Exp8  ::= Exp8  "!=" Exp9 ;

separator Exp "," ;
coercions Exp 15 ;

ATypeEqual. Assertion ::= "assertTypeEqual" "(" Id "," Type ")" ;

TType. 				 Type ::= CoreType "!" Double ;
TTypeExponential.  	 Type ::= CoreType "!" "inf" ;
TTypeConvenienceInt. Type ::= CoreType "!" Integer ;

CTBase.    CoreType ::= BaseType ;
CTMulPair. CoreType ::= "(" Type "," Type ")" ;
CTSum.     CoreType ::= "(" Type "+" Type ")" ;
CTList.    CoreType ::= "[" Type "]" ;
CTNamed.   CoreType ::= Ident Generics;
CTFunction.CoreType ::= "(" "(" [Type] ")" "->" Type ")" ;

GenericsNone. Generics ::= ;
GenericsType. Generics ::= "<" Type ">" ;

separator Type "," ;

rules BaseType ::= "Int" | "Float" | "Unit" ;

token Id (lower (letter | digit | '_')*) ;

comment "//" ;
comment "/*" "*/" ;
