PDefs.   Program ::= [Def] ;
terminator Def "" ;

DFun.        Def ::= "func" Id "(" [Arg] ")" "->" Type "{" [Stm] "}" ;
DFunExposed. Def ::= "exposed" "func" Id "(" [Arg] ")" "->" Type "{" [Stm] "}" ;
separator  Arg "," ;
terminator Stm "" ;

ADecl.     Arg ::= Id ":" Type ;

SInit.     Stm ::= "let" IdMaybeTyped "=" Exp ;
SSplit.    Stm ::= "let" "(" IdMaybeTyped "," IdMaybeTyped ")" "=" Exp ;
SReturn.   Stm ::= "return" Exp ;
SAssert.   Stm ::= Assertion ;

IdNotTyped. IdMaybeTyped ::= Id ;
IdTyped.    IdMaybeTyped ::= Id ":" Type ;

EInt.    Exp15 ::= Integer ;
EUnit.   Exp15 ::= "(" ")" ;
EId.     Exp15 ::= Id ;
EPair.   Exp15 ::= "(" Exp "," Exp ")" ;

EApp.    Exp15 ::= Id "(" [Exp] ")" ;
separator Exp "," ;

internal ETyped. Exp ::= "(" Exp ":" Type ")" ;

coercions Exp 15 ;

ATypeEqual. Assertion ::= "assertTypeEqual" "(" Id "," Type ")" ;

TType. 				 Type ::= CoreType "!" Double ;
TTypeExponential.  	 Type ::= CoreType "!" "inf" ;
TTypeConvenienceInt. Type ::= CoreType "!" Integer ;

CTBase.    CoreType ::= BaseType ;
CTMulPair. CoreType ::= "(" Type "," Type ")" ;

rules BaseType ::= "Int" | "Unit" ;

token Id (letter (letter | digit | '_')*) ;

comment "//" ;
comment "/*" "*/" ;
