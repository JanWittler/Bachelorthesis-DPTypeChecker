ProgramDefs.   Program ::= [Def] ;
terminator Def "" ;

DefFun.        Def ::= "func" Id "(" [Arg] ")" "->" Type "{" [Stm] "}" ;
DefFunExposed. Def ::= "exposed" "func" Id "(" [Arg] ")" "->" Type "{" [Stm] "}" ;
DefTypedef.	   Def ::= "typedef" Ident "=" "union" Type "|" Type ;

separator  Arg "," ;
terminator Stm "" ;

ArgDecl.     Arg ::= Id ":" Type ;

StmInit.     Stm ::= "let" IdMaybeTyped "=" Exp ;
StmSplit.    Stm ::= "let" "(" IdMaybeTyped "," IdMaybeTyped ")" "=" Exp ;
StmIfElse.   Stm ::= "if" "(" IfCond ")" "{" [Stm] "}" Else ;
StmReturn.   Stm ::= "return" Exp ;
StmAssert.   Stm ::= Assertion ;

IdMaybeTypedNotTyped. IdMaybeTyped ::= Id ;
IdMaybeTypedTyped.    IdMaybeTyped ::= Id ":" Type ;

IfCondCase.   IfCond ::= "case" "let" IdMaybeTyped "=" Case Exp ;
IfCondBool.   IfCond ::= Exp ; 
IfCondUnfold. IfCond ::= "let" "(" IdMaybeTyped "," IdMaybeTyped ")" "=" "unfold" Exp ;

ElseNone. Else ::= ;
ElseStms. Else ::= "else" "{" [Stm] "}" ;

rules Case ::= "inl" | "inr" ;

ExpInt.    Exp15 ::= Integer ;
ExpFloat.  Exp15 ::= Double ;
ExpUnit.   Exp15 ::= "(" ")" ;
ExpTrue.   Exp15 ::= "true" ;
ExpFalse.  Exp15 ::= "false" ;
ExpOption. Exp15 ::= "Just" "(" Exp ")" ;
ExpNothing.Exp15 ::= "Nothing" ;
ExpId.     Exp15 ::= Id ;
ExpPair.   Exp15 ::= "(" Exp "," Exp ")" ;
ExpSum.    Exp15 ::= Ident "(" Case ":" Exp ")" ;
ExpList.   Exp15 ::= "[" [Exp] "]" ;
ExpRef.    Exp15 ::= "ref" "<" Type ">" "(" ")" ;

ExpApp.    Exp15 ::= Id "(" [Exp] ")" ;

ExpNegative. Exp14 ::= "-" Exp13 ;
ExpNot.      Exp13 ::= "!"  Exp14 ;

ExpTimes.  Exp12 ::= Exp12 "*"  Exp13 ;
ExpPlus.   Exp11 ::= Exp11 "+"  Exp12 ;
ExpMinus.  Exp11 ::= Exp11 "-"  Exp12 ;

ExpLt.     Exp9  ::= Exp9  "<"  Exp10 ;
ExpGt.     Exp9  ::= Exp9  ">"  Exp10 ;
ExpLtEq.   Exp9  ::= Exp9  "<=" Exp10 ;
ExpGtEq.   Exp9  ::= Exp9  ">=" Exp10 ;

ExpEq.     Exp8  ::= Exp8  "==" Exp9 ;
ExpNeq.    Exp8  ::= Exp8  "!=" Exp9 ;

separator Exp "," ;
coercions Exp 15 ;

AssertionTypeEqual. Assertion ::= "assertTypeEqual" "(" Id "," Type ")" ;

TypeDefault. 		Type ::= CoreType "!" Double ;
TypeExponential.  	Type ::= CoreType "!" "inf" ;
TypeConvenienceInt. Type ::= CoreType "!" Integer ;

CoreTypeBase.    CoreType ::= BaseType ;
CoreTypeMulPair. CoreType ::= "(" Type "," Type ")" ;
CoreTypeSum.     CoreType ::= "(" Type "+" Type ")" ;
CoreTypeList.    CoreType ::= "[" Type "]" ;
CoreTypeNamed.   CoreType ::= Ident Generics;
CoreTypeFunction.CoreType ::= "(" "(" [Type] ")" "->" Type ")" ;

GenericsNone. Generics ::= ;
GenericsType. Generics ::= "<" Type ">" ;

separator Type "," ;

rules BaseType ::= "Int" | "Float" | "Unit" ;

token Id (lower (letter | digit | '_')*) ;

comment "//" ;
comment "/*" "*/" ;
